"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3520],{3375:e=>{function lisp(e){!function(e){function simple_form(e){return RegExp("(\\()"+e+"(?=[\\s\\)])")}function primitive(e){return RegExp("([\\s([])"+e+"(?=[\\s)])")}var n="[-+*/_~!@$%^=<>{}\\w]+",a="(\\()",t="(?=\\))",i={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+n+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+n),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+n),alias:"property"},splice:{pattern:RegExp(",@?"+n),alias:["symbol","variable"]},keyword:[{pattern:RegExp("(\\()(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)(?=\\s)"),lookbehind:!0},{pattern:RegExp("(\\()(?:for|do|collect|return|finally|append|concat|in|by)(?=\\s)"),lookbehind:!0}],declare:{pattern:simple_form("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:simple_form("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:primitive("(?:t|nil)"),lookbehind:!0},number:{pattern:primitive("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp("(\\()def(?:var|const|custom|group)\\s+"+n),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(n)}},defun:{pattern:RegExp("(\\()(?:cl-)?(?:defun\\*?|defmacro)\\s+"+n+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+n),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp("(\\()lambda\\s+\\((?:&?"+n+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(a+n),lookbehind:!0},punctuation:[/(['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},s={"lisp-marker":RegExp("&[-+*/_~!@$%^=<>{}\\w]+"),rest:{argument:{pattern:RegExp(n),alias:"variable"},varform:{pattern:RegExp(a+n+"\\s+\\S[\\s\\S]*"+t),lookbehind:!0,inside:{string:i.string,boolean:i.boolean,number:i.number,symbol:i.symbol,punctuation:/[()]/}}}},r="\\S+(?:\\s+\\S+)*",l={pattern:RegExp("(\\()[\\s\\S]*(?=\\))"),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:rest|body)\\s+"+r),inside:s},"other-marker-vars":{pattern:RegExp("&(?:optional|aux)\\s+"+r),inside:s},keys:{pattern:RegExp("&key\\s+"+r+"(?:\\s+&allow-other-keys)?"),inside:s},argument:{pattern:RegExp(n),alias:"variable"},punctuation:/[()]/}};i.lambda.inside.arguments=l,i.defun.inside.arguments=e.util.clone(l),i.defun.inside.arguments.inside.sublist=l,e.languages.lisp=i,e.languages.elisp=i,e.languages.emacs=i,e.languages["emacs-lisp"]=i}(e)}e.exports=lisp,lisp.displayName="lisp",lisp.aliases=[]}}]);
//# sourceMappingURL=bundle.7a95540564d2ecad2e8e.min.js.map